{
	// Place your movie_app_fluttercon25 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Add Movie Table": {
		"scope": "graphql",
		"prefix": "movieSchema",
		"body": ["type Movie @table {",
    "  title: String!",
    "  imageUrl: String!",
    "  description: String!",
    "  genre: String!",
    "  rating: Float!",
    "  releaseYear: Int!",
"}"]
	},
	"Add Watched Table": {
		"scope": "graphql",
		"prefix": "watchedSchema",
		"body": ["type Watched @table(key: [\"user\", \"movie\"]) {",
    "  user: User!",
    "  movie: Movie!",
"}"]
	},
	"Add List All Movies Query": {
		"scope": "graphql",
		"prefix": "listAllM",
		"body": ["query ListMovies @auth(level: PUBLIC) {",
"  movies {",
"    id",
"    title",
"    imageUrl",
"    description",
"    genre",
"  }",
"}"]
	},
	"Translate Movie Model": {
		"scope": "dart, flutter",
		"prefix": "convertModel",
		"body": [
			".then((res) {",
      "return res.data.movies",
          ".map((e) => Movie(",
              "description: e.description,",
              "genre: e.genre,",
              "id: e.id,",
              "imageUrl: e.imageUrl,",
              "releaseYear: e.releaseYear,",
              "rating: e.rating,",
              "title: e.title))",
          ".toList();",
    "});"
		],
		"description": "Convert movie model"
	},
	"Populate Top 10 Most Recent Movies": {
		"scope": "dart, flutter",
		"body": ["return MoviesConnector.instance.top10movies().execute().then((res) {",
"      return res.data.movies",
"          .map((e) => Movie(",
"              description: e.description,",
"              genre: e.genre,",
"              id: e.id,",
"              imageUrl: e.imageUrl,",
"              releaseYear: e.releaseYear,",
"              rating: e.rating,",
"              title: e.title))",
"          .toList();",
"    });"],
"prefix": "top10MostRecent"
	},
	"Populate getMovie": {
		"scope": "dart, flutter",
		"prefix": "getMovie",
		"body": ["return MoviesConnector.instance.getMovie(id: id).execute().then((e) {",
"      return Movie(",
"          description: e.data.movie!.description,",
"          genre: e.data.movie!.genre,",
"          id: e.data.movie!.id,",
"          imageUrl: e.data.movie!.imageUrl,",
"          releaseYear: e.data.movie!.releaseYear,",
"          rating: e.data.movie!.rating,",
"          title: e.data.movie!.title);",
"    });"]
	},
	"Populate All Movies": {
		"scope": "dart, flutter",
		"body": ["return MoviesConnector.instance.listAllMovies().execute().then((res) {",
"      return res.data.movies",
"          .map((e) => Movie(",
"              description: e.description,",
"              genre: e.genre,",
"              id: e.id,",
"              imageUrl: e.imageUrl,",
"              releaseYear: e.releaseYear,",
"              rating: e.rating,",
"              title: e.title))",
"          .toList();",
"    });"],
"prefix": "listAllMovies"
	},
	"Add Movie to Watched": {
		"body": [
"           await MoviesConnector.instance.addWatched(id: id).execute();",
"           return true;"
		],
		"scope": "dart, flutter",
		"prefix": "addWatched"
	},
	"Remove Movie from Watched": {
		"body": [
"           final res = await MoviesConnector.instance.removeWatched(id: id).execute();",
"           return res.data.watch_delete?.movieId != null;"
		],
		"scope": "dart, flutter",
		"prefix": "removeWatched"
	},
	"Check if movie has been watched": {
		"body": [
"    final res = await MoviesConnector.instance.isMovieWatched(id: id).execute();",
"    return res.data.watch?.movieId != null;"
		],
		"scope": "dart, flutter",
		"prefix": "isWatched"
	}
}