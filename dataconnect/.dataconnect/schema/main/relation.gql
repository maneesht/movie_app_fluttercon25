extend type Movie {
  """
  ✨ List `WatchedMovie` objects in a one-to-many relationship (where `WatchedMovie`.`movie` is this object).
  """
  watchedMovies_on_movie(
    """
    Filter condition to narrow down the query results.
    """
    where: WatchedMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WatchedMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: WatchedMovie_Having
  ): [WatchedMovie!]! @fdc_generated(from: "WatchedMovie.movie", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `User` objects using `WatchedMovie` as the join table (a `WatchedMovie` object exists where its `movie` is this and its `user` is that).
  """
  users_via_WatchedMovie(
    """
    Filter condition to narrow down the query results.
    """
    where: WatchedMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WatchedMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: WatchedMovie_Having
  ): [User!]! @fdc_generated(from: "WatchedMovie", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Movie", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Movie` table.
  """
  _count: Int! @fdc_generated(from: "Movie", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `genre` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  genre_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.genre", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `imageUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.imageUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `movieId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  movieId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.movieId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `rating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.rating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `releaseYear` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  releaseYear_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Movie` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Movie.title", purpose: QUERY_COUNT)
  """
  ✨ Sum the `rating` field in the `Movie` table.
  """
  rating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Movie.rating", purpose: QUERY_SUM)
  """
  ✨ Sum the `releaseYear` field in the `Movie` table.
  """
  releaseYear_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_SUM)
  """
  ✨ Average the `rating` field in the `Movie` table.
  """
  rating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Movie.rating", purpose: QUERY_AVG)
  """
  ✨ Average the `releaseYear` field in the `Movie` table.
  """
  releaseYear_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `rating` field in the `Movie` table.
  """
  rating_min: Float @fdc_generated(from: "Movie.rating", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `releaseYear` field in the `Movie` table.
  """
  releaseYear_min: Int @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `rating` field in the `Movie` table.
  """
  rating_max: Float @fdc_generated(from: "Movie.rating", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `releaseYear` field in the `Movie` table.
  """
  releaseYear_max: Int @fdc_generated(from: "Movie.releaseYear", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `WatchedMovie` objects in a one-to-many relationship (where `WatchedMovie`.`user` is this object).
  """
  watchedMovies_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: WatchedMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WatchedMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: WatchedMovie_Having
  ): [WatchedMovie!]! @fdc_generated(from: "WatchedMovie.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Movie` objects using `WatchedMovie` as the join table (a `WatchedMovie` object exists where its `user` is this and its `movie` is that).
  """
  movies_via_WatchedMovie(
    """
    Filter condition to narrow down the query results.
    """
    where: WatchedMovie_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [WatchedMovie_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: WatchedMovie_Having
  ): [Movie!]! @fdc_generated(from: "WatchedMovie", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.userId", purpose: QUERY_COUNT)
}
extend type WatchedMovie {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "WatchedMovie", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `WatchedMovie` table.
  """
  _count: Int! @fdc_generated(from: "WatchedMovie", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WatchedMovie` table where the `movieId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  movieId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WatchedMovie.movieId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `WatchedMovie` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "WatchedMovie.userId", purpose: QUERY_COUNT)
}
